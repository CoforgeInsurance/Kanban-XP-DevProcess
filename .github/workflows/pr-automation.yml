name: PR Automation

# Automatically manage pull requests
on:
  pull_request:
    types: [opened, edited, synchronize, labeled, unlabeled]

jobs:
  auto-label-pr:
    name: Auto-label Pull Requests
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Label by file changes
        uses: actions/github-script@v8
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const labels = new Set();
            
            files.forEach(file => {
              if (file.filename.endsWith('.md')) {
                labels.add('documentation');
              }
              if (file.filename.includes('test') || file.filename.includes('spec')) {
                labels.add('tests');
              }
              if (file.filename.startsWith('.github/')) {
                labels.add('ci-cd');
              }
            });
            
            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: Array.from(labels)
              });
            }

  check-pr-size:
    name: Check PR Size
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - name: Analyze PR size
        uses: actions/github-script@v8
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const changes = pr.additions + pr.deletions;
            let sizeLabel = '';
            
            if (changes < 100) sizeLabel = 'size/XS';
            else if (changes < 250) sizeLabel = 'size/S';
            else if (changes < 500) sizeLabel = 'size/M';
            else if (changes < 1000) sizeLabel = 'size/L';
            else sizeLabel = 'size/XL';
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [sizeLabel]
            });

  check-tests:
    name: Check Test Coverage
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    permissions:
      pull-requests: write
    
    steps:
      - name: Verify tests included
        uses: actions/github-script@v8
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const hasTestChanges = files.some(file => 
              file.filename.includes('test') || file.filename.includes('spec')
            );
            
            const hasCodeChanges = files.some(file => 
              !file.filename.includes('test') && !file.filename.endsWith('.md')
            );
            
            if (hasCodeChanges && !hasTestChanges) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '⚠️ **No Test Changes Detected**\n\n' +
                      'This PR modifies code but doesn\'t include test changes.\n\n' +
                      '**TDD/BDD Reminder:**\n' +
                      '- Write tests first (Red phase)\n' +
                      '- Implement code to pass tests (Green phase)\n' +
                      '- Refactor while keeping tests green'
              });
            }
